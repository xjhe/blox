import com.amazonaws.blox.swagger.ApiGatewayExtensionsFilter
import com.amazonaws.blox.swagger.ApiGatewaySecurityFilter
import com.amazonaws.blox.swagger.SwaggerFilter
import com.amazonaws.blox.tasks.GenerateSwaggerModel
import io.swagger.models.Info

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "io.swagger:swagger-models:${swaggerVersion}"
    }
}

plugins {
    id 'java'
    id 'blox-deploy'
    id 'net.ltgt.apt'
}

description "Lambda-backed API Gateway API for the Blox Frontend Service"

sourceCompatibility = 1.8

dependencies {
    // basic Lambda handler support
    compile project(":lambda-logging")

    // lambda+spring integration
    compile 'com.amazonaws.serverless:aws-serverless-java-container-spring:0.4+'

    // extra swagger annotations for defining API properties in code
    compile "io.swagger:swagger-annotations:${swaggerVersion}"

    compile "org.mapstruct:mapstruct-jdk8"

    compileOnly "org.mapstruct:mapstruct-processor"
    apt "org.mapstruct:mapstruct-processor"

    compile project(":data-service-client")

    compileOnly 'org.projectlombok:lombok'
    apt "org.projectlombok:lombok"

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile "org.assertj:assertj-core:3.8.0"
    testCompile 'org.mockito:mockito-core'
    testCompile 'org.springframework:spring-test'
}

compileJava {
    options.compilerArgs = [
            '-Amapstruct.defaultComponentModel=spring'
    ]
}

task swagger(type: GenerateSwaggerModel, dependsOn: classes) {
    group "build"
    description "Generate a swagger.yml definition from the Resource classes in this application"

    scanClasspath = project.sourceSets.main.runtimeClasspath

    // TODO: Specify API classes by package rather than name
    apiClasses += [
            'com.amazonaws.blox.frontend.operations.CreateEnvironment',
            'com.amazonaws.blox.frontend.operations.DescribeEnvironment',
            'com.amazonaws.blox.frontend.operations.DescribeEnvironmentDeployment',
            'com.amazonaws.blox.frontend.operations.DescribeEnvironmentRevision',
            'com.amazonaws.blox.frontend.operations.ListEnvironmentDeployments',
            'com.amazonaws.blox.frontend.operations.ListEnvironmentRevisions',
            'com.amazonaws.blox.frontend.operations.ListEnvironments',
            'com.amazonaws.blox.frontend.operations.StartDeployment',
    ]

    swaggerFile file("api/swagger.yml")

    filters.add({ swagger ->
        swagger.info(new Info()
                .title("ecs-blox-frontend")
                .version("v2017-07-11")
                .description("Blox frontend"))
    } as SwaggerFilter)

    filters.add(new ApiGatewayExtensionsFilter("arn:aws:apigateway:\${AWS::Region}:lambda:path/2015-03-31/functions/\${FrontendHandler.Arn}/invocations"))
    filters.add(new ApiGatewaySecurityFilter())
}

task packageLambda(type: Zip, dependsOn: classes) {
    group "build"
    description "Create a Lambda deployment package with this package's code and all required libraries"

    from compileJava
    from processResources

    into('lib') {
        from configurations.runtime
    }
}

deployment {
    aws {
        profile stack.profile.toString()
        region stack.region.toString()
    }

    stackName stack.cfnStack.toString()
    s3Bucket stack.s3Bucket.toString()

    templateFile file("cloudformation/template.yml")

    parameters["StageName"] = stack.stage.toString()

    apis {
        FrontendApi {
            swaggerFile = swagger
        }
    }

    lambdaFunctions {
        FrontendHandler {
            zipFile = packageLambda
        }
    }
}

task showDeployedApi() {
    group "help"
    description "Show details about the currently deployed stack"

    doLast {
        println "API URL: ${deployment.outputs["ApiUrl"] ?: "Not Deployed"}"
    }
}
