plugins {
    id "java"
    id "io.spring.dependency-management"
    id "blox-deploy"
    id "com.commercehub.cucumber-jvm"
}

addCucumberSuite 'cucumber'

dependencies {
    compile(
            project(":lambda-spring"),
            project(":lambda-logging"),
            'com.amazonaws:aws-lambda-java-events:1.3.0',

            'software.amazon.awssdk:ecs',
            'software.amazon.awssdk:lambda',

            'org.apache.commons:commons-lang3:3.6+',

            'org.projectlombok:lombok',

            'org.springframework:spring-core',
            'org.springframework:spring-beans',
            'org.springframework:spring-context',

            'com.spotify:completable-futures:+',
            project(":data-service-model"),
            project(":json-rpc-lambda-client"),

            "com.google.guava:guava:16+",
    )

    testCompile(
            'software.amazon.awssdk:cloudformation',

            'org.assertj:assertj-core:3.8+',
            'org.springframework:spring-test',
            'org.mockito:mockito-core',
            'org.hamcrest:hamcrest-junit:2.+',
            'junit:junit:4.12'
    )

    cucumberCompile(
            'info.cukes:cucumber-java8',

            'org.assertj:assertj-core:3.8+',
    )
}

test {
    useJUnit {
        excludeCategories 'com.amazonaws.blox.testcategories.IntegrationTest'
    }
}

check.dependsOn("cucumber")

task packageLambda(type: Zip) {
    from compileJava
    from processResources
    into('lib') {
        from configurations.runtime
    }
}

deployment {
    aws {
        profile stack.profile.toString()
        region stack.region.toString()
    }

    stackName "scheduling-manager"
    s3Bucket stack.s3Bucket.toString()

    templateFile file("templates/scheduling_manager.yml")
    lambdaFunctions {
        Reconciler { zipFile = packageLambda }
        Manager { zipFile = packageLambda }
        Scheduler { zipFile = packageLambda }
    }
}

afterEvaluate {
    it.tasks.deploy.mustRunAfter(":data-service:deploy")
}
