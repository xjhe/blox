plugins {
    id "java"
    id 'blox-deploy'
}

description "Implementation of the Blox DataService"

compileJava {
    options.compilerArgs = [
            '-Amapstruct.defaultComponentModel=spring'
    ]
}

repositories {
    maven {
        url "https://s3-us-west-2.amazonaws.com/dynamodb-local/release"
    }
}

dependencies {
    compile project(":data-service-model")
    compile project(":lambda-spring")
    compile project(":json-rpc-lambda-server")

    compile(
            project(":lambda-logging"),
            'com.amazonaws:aws-java-sdk-dynamodb',

            'org.apache.commons:commons-lang3:3.6',

            'org.projectlombok:lombok',

            'org.mapstruct:mapstruct-jdk8',

            'org.springframework:spring-core',
            'org.springframework:spring-beans',
            'org.springframework:spring-context',
    )

    compileOnly(
            'org.mapstruct:mapstruct-processor',
    )

    testCompile(
            'junit:junit:4.12',
            'org.assertj:assertj-core:3.8+',
            'org.hamcrest:hamcrest-junit:2.+',
            'org.mockito:mockito-core',
            'org.slf4j:jcl-over-slf4j',
            'org.springframework:spring-test',
            'com.amazonaws:DynamoDBLocal:+',
    )
}

def sqliteNativeLibName() {
    def os = org.gradle.internal.os.OperatingSystem.current()

    if (os.isMacOsX()) "libsqlite4java-osx"
    else if (os.isLinux()) "libsqlite4java-linux-amd64"
    else if (os.isWindows()) "sqlite4java-win32-x64"
}

test {
    // Set the path to the native sqlite4java artifacts for the current platform:
    // (see https://bitbucket.org/almworks/sqlite4java/wiki/UsingWithMaven for details)
    def libName = sqliteNativeLibName()
    def path = configurations.testRuntime.resolve().find { it.name.startsWith(libName) }

    systemProperty 'sqlite4java.library.path', path.parent
}

task packageLambda(type: Zip, dependsOn: classes) {
    group "build"
    description "Create a Lambda deployment package with this package's code and all required libraries"

    from compileJava
    from processResources

    into('lib') {
        from configurations.runtime
    }
}

assemble.dependsOn(packageLambda)

deployment {
    aws {
        profile stack.profile.toString()
        region stack.region.toString()
    }

    stackName "data-service"
    s3Bucket stack.s3Bucket.toString()

    templateFile file("templates/data_service.yml")

    lambdaFunctions {
        DataServiceHandler { zipFile = packageLambda }
    }
}

